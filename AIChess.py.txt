# A chess playing program that makes random moves.  
#  upgrade will use to AI to generate moves

class ChessBoard():
	def __init__(self):
		Files = ('a','b','c','d','e','f','g','h')
		Ranks = ('1','2','3','4','5','6','7','8')
		Colors = ('White','Black')

	def BoardDict(self): # use nested for loops to generate boardmatrix?

class AllPiecesByName(self):
	def __init__(self):
		WhitePieces = ('WLRook','WRRook','WLKnight','WRKnight', 'WLBishop','WRBishop','WQueen','WKing')
		WhitePawns = ('WP1','WP2','WP3','WP4','WP5','WP6', 'WP7','WP8')
		BlackPieces = ('WLRook','WRRook','WLKnight','WRKnight', 'WLBishop','WRBishop','WQueen','WKing')
		WhitePawns = ('WP1','WP2','WP3','WP4','WP5','WP6', 'WP7','WP8')
		# Pieces are in sets, now their attributes are required
		# Need data structure to store FirstMove t/f for pawns, rooks, and king,
		#  current position for every piece 

class AllPiecesByHomePosition

class White(self):
	def __init__(self):
		# create all white pieces and pawns, and their capability

class Black(self):
	def __init__(self):
		# create all black pices and pawns



class GameStatus(self)

# use list comprehension sto generate all the pawns and pieces,
#  identified by their original location:
Files = ('a','b','c','d','e', 'f','g','h')
Ranks = (n for n in range(1,9))
# Use loop to initialize all pieces and their status 
# Create the white pieces/pawns:
for files in Files:
	for ranks in Ranks:
		CurrentPiece = {}
		WhitePawns.append()  
WhitePieces =  
# create the black pieces/pawns
BlackPawns = 
BlackPieces = 
# Pieces are identified by their original square
# set initial game status
WhiteInCheck = False
BlackInCheck = True

#  Implementation:  The basic implementation
#   need only know the legal moves available
#   for any given position and randomly choose
#   one, realizing when it is in check, and
#   ultimately, check-mate.  Will make no effort 
#   to avoid draws, or stalemate, i.e. has
#   no prescience.

#  set  up process to determine all
#   available legal moves 
#  relevant chess rules - by piece:

# setup a Class for game tokens, and sub class pawn and pieces
#  enumerate all legal moves and conditionals:
#  Pawn - forward one square, one or two squares on first move
#   capture opposing piece on either diagonal, may/must be queened
#   on last rank, en passant.  Track t/f for first move of each pawn. 
#   and t/f for move to last rank.  
def EvaluateMove(CurrentPosition, Token, Token_Status, Game_Status):
	# we know our current position, the piece/pawn we are working with
	#  its status (first move, check/no check) and game status (check/no check, move counter(s) in play, ) 
def legalmove(CurrentPosition):
	for tokens in CurrentPosition:
		# recursively evaluate each token's legal moves
		EvaluateMove(CurrentPosition, token) 
	# 
	return

def Pawn(Token):

if firstmove == True:
	pass
else:
	!en_passant
	!two_squares_forward



def King(Token):


def Status(check=False, )
def MyMove(Status):
	if Status == check: # evaluate only moves that remove check
		 
	else:  # enumerate all possible moves
		for token in tokens:
			movelist.append(legalmove)
			movelist.add()
		return movelist.random()

class initializeGameBoard(self): # GameBoard is a dict containing current position of all chessmen
	def __init__(self):
		GameBoard = ('')

class initializeGameStatus(self):
	def __init__(self):
		CheckMate = False
		StaleMate = False
		ThreeFoldDrawCount = 0 
		FiftyFoldDrawCount = 0 

class initializeChessMenStatus(self): #set moves to 0, all starting positions, all global illegal moves


class GetWhiteMove(currentBoardPosition, currentGameStatus, currentChessMenStatus):
	def __init__(self): # need methods for enumerating legal moves, enumerating status changes
		                # of game and chessmen, choosing a move, updating game and chessmen status  

	def legalmoves(currentBoardPosition):
		# significant code to iterate thru board position and generate List of all legal moves
		# include choosemove function to recieve a list of all moves and choose the 'best'


def main():
	currentBoardPosition = {}
	currentBoardPosition = initializeGameBoard()
	currentGameStatus = initializeGameStatus()
	currentChessMenStatus = initializeChessMenStatus()
	WhitesMove = True
	while not currentGameStatus.checkmate():
		if WhitesMove:
			WhiteMove = GetWhiteMove(currentBoardPosition, currentGameStatus, currentChessMenStatus)
			currentBoardPosition = currentBoardPosition(WhiteMove)
			currentGameStatus
































